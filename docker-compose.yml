version: "3.8"

services:
  db:
    container_name: disco-db
    image: postgres:15.3-bullseye
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${PG_USER:-postgres}
      POSTGRES_PASSWORD: ${PG_PASSWORD:-postgres}
      POSTGRES_DB: ${PG_DB:-discosnake}
      PGDATA: /var/lib/postgresql/data/pgdata
    user: 1000:1000
    ports:
      - mode: ingress
        target: 5432
        published: ${PG_HOST_PORT:-2027}
        protocol: tcp
    volumes:
      - type: bind
        source: ./data/pgdata/
        target: /var/lib/postgresql/data/
        bind:
          create_host_path: true
    healthcheck:
      disable: false
      test: ["CMD", "pg_isready", "-U", "${PG_USER}", "-h", "127.0.0.1" ]
      start_period: 5s
      interval: 5s
      retries: 3
      timeout: 5s

  pgweb:
    container_name: disco-pgweb
    image: sosedoff/pgweb:latest
    restart: unless-stopped
    profiles:
      - pgweb
    environment:
      POSTGRES_USER: ${PG_USER:-postgres}
      POSTGRES_PASSWORD: ${PG_PASSWORD:-postgres}
      POSTGRES_DB: ${PG_DB:-discosnake}
      POSTGRES_SERVER: db
      PGWEB_DATABASE_URL: postgres://${PG_USER}:${PG_PASSWORD}@${PG_SERVER}:5432/${PG_DB}?sslmode=disable
    ports:
      - mode: ingress
        target: 8081
        published: 5050
        protocol: tcp
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      disable: false
      test: [ "CMD", "nc", "-vz", "127.0.0.1", "8081" ]
      start_period: 5s
      interval: 5s
      retries: 3
      timeout: 5s

  pgadmin4:
    container_name: disco-pgadmin
    image: dpage/pgadmin4:7
    restart: unless-stopped
    profiles:
      - pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-pgadmin4@pgadmin.org}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
      PGADMIN_LISTEN_PORT: "5050"
      PGADMIN_CONFIG_SERVER_MODE: "False"
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: "False"
      PGADMIN_CONFIG_CONSOLE_LOG_LEVEL: "30" # 10=DEBUG, 20=INFO, 30=WARN, 40=ERROR, 50=CRITICAL
    volumes:
      - type: bind
        source: ./data/pgdata/pgadmin/
        target: /var/lib/pgadmin/
    ports:
      - mode: ingress
        target: 5050
        published: 5050
        protocol: tcp
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      disable: false
      test: [ "CMD", "nc", "-vz", "127.0.0.1", "5050" ]
      start_period: 5s
      interval: 5s
      retries: 3
      timeout: 5s

  redis:
    container_name: disco-redis
    image: redis/redis-stack:7.2.0-M01
    restart: unless-stopped
    # environment:
    #  REDIS_ARGS: ""
    volumes:
      - type: bind
        source: ./data/redis/data
        target: /data
      - type: bind
        source: ./data/redis/redis.conf
        target: /redis-stack.conf
        read_only: true
    ports:
      - mode: ingress
        target: 6379
        published: 6379
        protocol: tcp
      - mode: ingress
        target: 8001
        published: 5051
        protocol: tcp
